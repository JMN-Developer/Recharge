<?php
namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Http\Traits\OauthToken;
use App\Services\SecretProvider;
use Illuminate\Support\Carbon;
use DB;
class ApiTestController extends Controller
{
    //
    use OauthToken;
    protected $epay;

    public function __construct()
    {

        $this->epay = SecretProvider::get_secret('epay');
    }
    public function ean_profit()
    {
        $data = [9998889999180,9998889999102,9998889999102,8055348519457,9998889999122,9998889999176,9998889999176,9998889999122,9998889999122,9998889999176,8055348513059,9998889999121,8055348519464,9998889999177,8055348513042,8055348519464,9998889999122,4251404504038,8055348519457,8055348513042,8055348513059,8055348519457,9998889999177,9998889999122,9998889999122,8055348513042,9998889999177,9998889999177,9998889999176,9998889999177,9998889999304,9998889999304,9998889999122,8055348519457,9998889999176,9998889999122,9998889999180,9998889999122,8055348519457,8055348513059,9998889999177,9998889999305,9998889999177,9998889999177,8055348513059,9998889999123,9998889999121,9998889999102,9998889999177,8055348519464,1234567892016,9998889999176,9998889999177,9998889999013,9999999999011,8055348513042,8055348513042,8055348513059,9999999999011,8055348513042,9998889999177,9998889999120,9998889999101,8055348513042,9998889999305,9998889999120,8055348513042,8055348513059,9998889999177,9998889999225,9998889999177,9998889999177,9999999999082,9998889999304,9998889999177,9998889999013,9998889999176,9998889999177,9998889999177,9998889999180,9998889999303,9998889999180,8055348513042,9998889999177,9998889999176,9998889999176,9998889999122,8055348513042,9998889999177,9998889999102,9998889999122,9998889999177,9998889999122,9998889999122,9998889999177,9998889999176,9998889999176,9998889999177,8055348519464,9998889999120,9998889999177,9998889999177,9998889999177,9998889999224,9998889999122,9998889999176,9998889999013,9998889999177,9998889999176,8055348519464,9998889999177,9998889999102,9998889999101,8055348519464,9998889999101,9998889999012,9998889999012,9998889999120,9998889999177,1234567892023,9999999999237,9998889999130,9999999999082,9998889999177,9998889999120,9998889999121,9998889999176,9998889999176,8055348519457,9998889999305,9998889999176,9998889999177,9999999999237,9998889999177,9998889999101,9998889999102,9998889999225,9998889999176,9998889999122,9998889999177,8055348513042,9998889999122,8055348519457,8055348513059,9998889999102,8055348513059,9998889999178,9998889999177,9998889999122,8055348513042,9998889999122,8055348513042,8055348513059,9998889999122,9998889999177,9998889999101,9998889999101,9998889999121,9998889999224,9998889999177,9998889999177,9998889999013,9998889999122,8055348513042,8055348513059,9998889999177,8055348513059,9998889999120,9998889999177,9998889999205,9998889999120,9998889999180,9998889999176,8055348519457,9998889999176,8055348513059,9998889999178,9998889999176,9998889999176,9998889999102,9998889999177,9998889999102,9998889999102,9998889999122,9998889999177,9998889999121,8055348519464,8055348513042,8055348513042,9998889999177,9998889999180,8055348513059,9998889999177,9998889999176,8055348513042,8055348513059,9998889999102,9998889999122,8055348513059,8055348519464,9998889999177,9998889999120,9998889999177,9998889999177,8055348513059,8055348513059,8055348513059,8055348513059,8055348513059,9998889999121,9998889999121,9998889999120,9998889999180,9999999999107,9998889999177,9998889999120,9998889999177,9998889999177,9998889999177,9998889999176,8055348512427,9998889999121,9998889999177,8055348519457,9998889999177,9998889999122,9998889999176,9999999999237,9998889999176,9998889999224,8055348513059,9998889999180,9998889999120,9998889999102,9998889999120,9998889999176,9998889999176,9998889999120,8055348519464,8055348519464,8055348512441,9998889999177,9998889999120,8055348513059,9998889999120,9998889999120,9998889999180,9998889999101,9998889999176,8055348513042,9998889999122,9998889999012,9998889999176,9998889999122,9998889999121,8055348519457,9998889999178,8055348513042,9998889999122,9998889999176,9998889999177,9998889999012,9998889999177,9998889999122,9998889999180,9998889999180,1234567892016,9998889999177,9998889999177,8055348519457,9998889999121,8055348519457,9998889999177,9998889999224,9998889999010,8055348513059,9998889999176,9998889999176,9998889999225,9998889999120,9998889999177,8055348513059,9998889999122,9998889999180,8055348519457,9998889999122,8055348513042,9998889999180,9998889999177,9998889999176,9998889999122,8055348519464,9998889999177,8055348513059,9998889999177,1234567892009,9998889999180,9998889999121,9998889999177,9998889999120,1234567892016,9998889999177,9998889999102,8055348519457,9998889999120,8055348513042,9998889999102,9998889999102,8055348513042,9998889999101,9998889999177];
        $profit = [];
        for($i=0;$i<sizeof($data);$i++)
        {
            $domestic_profit = DB::table('domestic_profits')->where('ean',$data[$i])->first();
            if($domestic_profit)
            {
                array_push($profit,['ean'=>$data[$i],'commision'=>$domestic_profit->commission]);

            }
            else
            {
                array_push($profit,['ean'=>$data[$i],'commision'=>0]);
            }
        }
        return json_encode($profit);
    }

    public function epay_transaction_list()
    {

        // for($i=0;$i<=24;$i++){
        //     array_push($date,'2022-03-06 '.str_pad($i, 2, "0", STR_PAD_LEFT).':00:00');
        // }
        // $date = '2022-03-05 00:00:00';
        // $date_store = [];
        // for($i=0;$i<144;$i++)
        // {
        // $date = Carbon::parse($date)->addMinutes(10)->format('Y-m-d H:i:s');
        // array_push($date_store,$date);
        // }

        $data2 = [];



        $xml = '<?xml version="1.0" encoding="ISO-8859-1" ?>
        <REQUEST TYPE="TXLIST">
        <USERNAME>UPLIVE_AMICIBIGIOTTERIA</USERNAME>
        <PASSWORD>'.$this->epay.'</PASSWORD>
        <TERMINALID RETAILERACC="PNTRCG" STOREID="3D001">IT028215</TERMINALID>
        <LOCALDATETIME>'.Carbon::now('Europe/Berlin').'</LOCALDATETIME>
        <TXID>18032022144955002320</TXID

        </REQUEST>';
        $client = new \GuzzleHttp\Client();
        $recharge_request = $client->post('https://precision.epayworldwide.com/up-interface',[
            'headers' => [
            'api_key'     => 'Etmo8i5V9q862PHn5dNJSb',
            'content_type' => 'application/xml'
            ],
            'verify' => false,
            'body' => $xml
        ]);

        $body = $recharge_request->getBody();
        $xml = simplexml_load_string($body);
        return json_encode($xml);
        foreach(json_decode(json_encode($xml->TXLIST)) as $data)
        {
	//echo $xml->TXLIST;
            //dd($data->txid);

		array_push($data2,$data);

        }


    return json_encode($data2);
    $data3 = [];
    $data2 = json_decode(json_encode($data2));
    for($i=0;$i<sizeof($data2);$i++)
    {

            array_push($data3,['date'=>$data2[$i]->SERVERDATETIME,'txid'=>$data2[$i]->TXID,'amount'=>$data2[$i]->AMOUNT]);

    }

     echo json_encode($data3);
    }

    public function test_token()
    {
        return $this->createToken();
    }

    public function get_balance()
    {
        $client = new \GuzzleHttp\Client();
        $product_request = $client->get('https://api.dingconnect.com/api/V1/GetBalance',['headers' => [
            'Authrization'     => 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjNBRDlFQjE2OEE3MzhGMTRDQ0M4OEE4NjIyQjczQUE1MzZDOTM5Q0FSUzI1NiIsInR5cCI6ImF0K2p3dCIsIng1dCI6Ik90bnJGb3B6anhUTXlJcUdJcmM2cFRiSk9jbyJ9.eyJuYmYiOjE2MzY4OTcyMTIsImV4cCI6MTYzNjg5OTAxMiwiaXNzIjoiaHR0cHM6Ly9pZHAuZGluZy5jb20iLCJhdWQiOiJkaW5nY29ubmVjdGFwaSIsImNsaWVudF9pZCI6ImZiZWMxZDdiLTE3OWMtNGZhNS1hZTdhLTE5NmRmM2EzMjQxMiIsImp0aSI6IkVFRjU3QjVEMjdDRUNGQTgxMzc1NkQzRkM5MUZEMTgzIiwiaWF0IjoxNjM2ODk3MjEyLCJzY29wZSI6WyJ0b3B1cGFwaSJdfQ.E0WvryAwcp93SGHIcFuWKcOeTBsNo7NcMVA9NIO39ERtbkPlL86AeNBYdE5qw_tKSlMnBBFrCVDAGAJqp66AggQhDM_csOhd1kZ5OILgICjbWNLjRWk_3kZNTRw_aJMr2IoqSORqeNk-lfBqV4RuPJw410JtJMVuFm5_LeTyjFwVsOOPiCTiVek9Ze8xLqhnwW9pfCtl6YGXkaMPJ3L0FOllEj3DZ9bxZGD9GV111Qv3lGpPmsXBwN0DmzIOjpXeXj_dfflrh14N9JdJvEnRjwvrYq4t84wqI0eSrPAvNdOM59CZ5FeIBSJAWwRduBWJNAXxpLtRV3A8CDc2ysEREN1kX-OEOIYh3osxue4uSP3Pl_GEHRGvQ27Zm1jJgoJ9T8IMLIqFIjCWaDsoWGVnNjKIhx6-r4TsanNNTcSmyPIRrHo-QE0F1oZmvlppSjCVu6pOHAPLJmTYss-FaHGI7WZ3hevkGnilN5lojPzZsdpilg7DQ7j56c2vFSwVyxjiySz3VpJwEsLQX7sdAP2SM21jIkmeFNYCmAxaYohs2Tk5EXl5rVWf0zjOPK-GUjTL7gsAl772wFHvI_Iag72dlz094_jWe3rPiHdciGWGLN6sVtyDQT4xPw5Tn6NkuLVs4AEMeKHYkMqpP-RoyRw9Gyo_vKfpTq6Tp50OnDXkOs4'
            ],'verify' => false]);
        $product_responses = $product_request->getBody();

        $prod = json_decode($product_responses,true);

        $bal = $prod['Balance'];
        return $prod;

    }

    public function check_operator(Request $request)
    {
        $number = $request->number;
        $client = new \GuzzleHttp\Client();
        $operator_request = $client->get('https://api.dingconnect.com/api/V1/GetProviders?accountNumber='.$number,['headers' => [
            'api_key'     => 'G4ymoFlN97B6PhZgK1yzuY'
            ],'verify' => false]);
        $operator_response = $operator_request->getBody();
        //$data = json_decode($operator_response,true);
        return $operator_response;
    }

    public function get_products(Request $request)
    {
        $code = $request->code;
        $client = new \GuzzleHttp\Client();
        $product_request = $client->get('https://api.dingconnect.com/api/V1/GetProducts?&providerCodes='.$code,['headers' => [
            'api_key'     => 'G4ymoFlN97B6PhZgK1yzuY'
            ],'verify' => false]);
        $product_responses = $product_request->getBody();
        return $product_responses;
    }
}
